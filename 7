//Cho mảng gồm các phần tử { 41, 23, 4, 14, 56, 1 } nhập vào từ bàn phím. Viết chương trình để sắp xếp. Sử dụng phương pháp sắp xếp cây để sắp xếp
#include <iostream>
#include <algorithm>

using namespace std;

void heapify(int arr[], int n, int i) {
    int largest = i; // Khởi tạo largest là nút gốc
    int left = 2 * i + 1; // Lấy chỉ số của nút con bên trái
    int right = 2 * i + 2; // Lấy chỉ số của nút con bên phải
 
    // Kiểm tra nút con bên trái có lớn hơn nút gốc không
    if (left < n && arr[left] > arr[largest])
        largest = left;
 
    // Kiểm tra nút con bên phải có lớn hơn nút gốc không
    if (right < n && arr[right] > arr[largest])
        largest = right;
 
    // Nếu largest khác i (nút gốc)
    if (largest != i) {
        swap(arr[i], arr[largest]); // Hoán đổi nút gốc với nút con lớn nhất
        heapify(arr, n, largest); // Tái cấu trúc cây con bị ảnh hưởng
    }
}

void heapSort(int arr[], int n) {
    // Xây dựng cây heap (đảo ngược)
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
 
    // Trích xuất lần lượt các phần tử từ cây heap (đảo ngược) và đưa vào mảng đã sắp xếp
    for (int i = n - 1; i >= 0; i--) {
        swap(arr[0], arr[i]); // Hoán đổi phần tử đầu tiên (nút gốc) với phần tử cuối cùng
        heapify(arr, i, 0); // Tái cấu trúc cây heap (đảo ngược) để loại bỏ phần tử cuối cùng
    }
}

int main() {
    int arr[] = { 41, 23, 4, 14, 56, 1 };
    int n = sizeof(arr) / sizeof(arr[0]);
 
    heapSort(arr, n);
 
    cout << "Mang sau khi sap xep: \n";
    for (int i = 0; i < n; ++i)
        cout << arr[i] << " ";
    cout << endl;
 
    return 0;
}
